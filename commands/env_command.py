import typer
from scripts.env_script import ajouter_cles_api, lister_cles_api, supprimer_cles_api
from constants.supported_exchanges import list_supported_exchanges, is_exchange_supported

app = typer.Typer()

@app.command(help="üîê Enregistre une cl√© API pour une plateforme autoris√©e")
def add_key(
    exchange: str = typer.Option(..., help="Nom de la plateforme (ex: binance)"),
    api_key: str = typer.Option(..., help="Cl√© API"),
    api_secret: str = typer.Option(..., help="Cl√© secr√®te")
):
    """
    Ajoute ou met √† jour une cl√© API dans le fichier .env
    """
    try:
        exchange_code = ajouter_cles_api(exchange, api_key, api_secret)
        typer.secho(f"‚úÖ Cl√©s API pour {exchange_code} enregistr√©es dans .env", fg=typer.colors.GREEN)
    except ValueError as e:
        typer.secho(f"‚ùå Erreur : {e}", fg=typer.colors.RED)
        typer.echo("üìå Plateformes support√©es :")
        for ex in list_supported_exchanges():
            typer.echo(f"  - {ex}")



@app.command("list-keys", help="üìã Liste toutes les cl√©s API enregistr√©es dans le fichier .env")
def list_keys():
    """
    Affiche les cl√©s API existantes, par plateforme.
    """
    cles = lister_cles_api()
    if not cles:
        typer.echo("‚ÑπÔ∏è Aucune cl√© API trouv√©e dans le fichier .env.")
        return

    typer.echo("üîê Cl√©s API enregistr√©es :\n")
    for exchange, data in cles.items():
        typer.echo(f"üì¶ {exchange.upper()}")
        typer.echo(f"   - Cl√©     : {data.get('key', '[manquante]')}")
        typer.echo(f"   - Secret  : {'[pr√©sent]' if 'secret' in data else '[manquant]'}")
        typer.echo("")



@app.command("remove-key", help="üóëÔ∏è Supprime les cl√©s API d'une plateforme du fichier .env")
def remove_key(
    exchange: str = typer.Option(..., help="Nom de la plateforme √† supprimer (ex: binance)")
):
    """
    Supprime les cl√©s API d'une plateforme dans .env, apr√®s confirmation utilisateur.
    """
    try:
        exchange_lower = exchange.lower()
        if not is_exchange_supported(exchange_lower):
            raise ValueError(f"La plateforme '{exchange}' n'est pas support√©e.")
        
        confirmation = typer.confirm(
            f"‚ùó √ätes-vous s√ªr de vouloir supprimer les cl√©s API pour '{exchange}' ?"
        )
        if not confirmation:
            typer.echo("‚ùå Suppression annul√©e.")
            return

        removed = supprimer_cles_api(exchange_lower)
        if removed:
            typer.secho(f"‚úÖ Cl√©s API pour '{exchange}' supprim√©es avec succ√®s.", fg=typer.colors.GREEN)
        else:
            typer.secho(f"‚ÑπÔ∏è Aucune cl√© trouv√©e pour '{exchange}' dans le fichier .env.", fg=typer.colors.YELLOW)

    except ValueError as e:
        typer.secho(f"‚ùå Erreur : {e}", fg=typer.colors.RED)
